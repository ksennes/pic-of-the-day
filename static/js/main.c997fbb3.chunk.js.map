{"version":3,"sources":["const.js","components/navigation-layout/navigation-layout.js","components/single-picture-layout/single-picture-layout.js","components/gallery-layout/gallery-layout.js","App.js","serviceWorker.js","index.js"],"names":["API","START_DATE","moment","add","format","NavigationLayout","props","activeLink","className","title","link","map","el","index","key","to","SinglePictureLayout","useState","picture","setPicture","Date","startDate","setStartDate","date","setDate","useEffect","fetch","then","res","json","data","savedDate","sessionStorage","getItem","toDate","src","url","todayButton","selected","onChange","changedDate","setItem","GalleryLayout","pictures","setPictures","reverse","alt","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yQAGaA,G,MAAG,sDADG,6CAKNC,EAAaC,MAASC,KAAK,GAAI,QAAQC,OAAO,cCF9CC,G,MAAmB,SAACC,GAAU,IAE/BC,EAAeD,EAAfC,WAOR,OACI,yBAAKC,UAAU,qBACX,wBAAIA,UAAU,mBAPC,CACnB,CAAEC,MAAO,mBAAoBC,KAAM,qBACnC,CAAED,MAAO,UAAWC,KAAM,aAMFC,KAAI,SAACC,EAAIC,GACrB,OAAO,wBAAIC,IAAKD,GACZ,kBAAC,IAAD,CAAML,UAAWI,EAAGH,QAAQF,EAAa,cAAgB,OAAQQ,GAAIH,EAAGF,MACnEE,EAAGH,eCTnBO,EAAsB,WAAM,IAAD,EACNC,mBAAS,IADH,mBAC7BC,EAD6B,KACpBC,EADoB,OAEFF,mBAAS,IAAIG,MAFX,mBAE7BC,EAF6B,KAElBC,EAFkB,OAGZL,mBAASf,MAASE,OAAO,eAHb,mBAG7BmB,EAH6B,KAGvBC,EAHuB,KAKpCC,qBAAU,WACNC,MAAM,GAAD,OAAI1B,EAAJ,iBAAgBuB,IAAQI,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAM,SAAAG,GAAI,OAAIX,EAAWW,QAChF,CAACP,IAEJE,qBAAU,WACN,IAAMM,EAAYC,eAAeC,QAAQ,QACtCF,IACCP,EAAQO,GACRT,EAAapB,IAAO6B,GAAWG,aAEpC,IAOH,OACI,yBAAK1B,UAAU,yBACX,kBAAC,EAAD,CAAkBD,WAAa,qBAC/B,kDACA,yBAAKC,UAAU,iBACX,yBAAK2B,IAAKjB,EAAQkB,OAEtB,yBAAK5B,UAAU,yBACX,2CACA,kBAAC,IAAD,CAAY6B,YAAY,QACZC,SAAUjB,EACVkB,SAAU,SAAChB,GAhBV,IAACiB,EAiBElB,EAAaC,GAjBfiB,EAkBmBtC,IAAOqB,GAAMnB,OAAO,cAjB7D4B,eAAeS,QAAQ,OAAQD,GAC/BhB,EAAQgB,SCvBHE,G,OAAgB,WAAO,IAAD,EAECzB,mBAAS,IAFV,mBAExB0B,EAFwB,KAEdC,EAFc,KAQ/B,OAJAnB,qBAAU,WACNC,MAAM,GAAD,OAAI1B,EAAJ,uBAAsBC,EAAtB,yBAAwD0B,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAASF,MAAM,SAAAG,GAAI,OAAIc,EAAYd,QAClH,CAACa,IAGA,kBAAC,WAAD,KACI,kBAAC,EAAD,CAAkBpC,WAAW,YAC7B,yBAAKC,UAAU,kBAEXmC,EAASE,UAAUlC,KAAI,SAACC,EAAIC,GACxB,OACI,yBAAKL,UAAU,wBAAwBM,IAAKD,GACxC,yBAAKsB,IAAKvB,EAAGwB,IAAKU,IAAKlC,EAAGH,QAC1B,2BAAIG,EAAGW,MACP,2BAAIX,EAAGH,eCPpBsC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,UAAWlC,IACjD,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,WAAWC,UAAWR,IACxC,kBAAC,IAAD,CAAU3B,GAAG,yBCADoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c997fbb3.chunk.js","sourcesContent":["import moment from 'moment';\r\n\r\nexport const KEY = 'BLg6EmuofZgk2KFEmkxDDBc4QZpLRpnhEk3Dr8b2';\r\nexport const API = `https://api.nasa.gov/planetary/apod?api_key=${KEY}`;\r\n\r\n\r\n\r\nexport const START_DATE = moment().add(-10, 'days').format('YYYY-MM-DD'); //10 максимальное количество картинок от сервера","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './navigation-layout.css';\r\n\r\nexport const NavigationLayout = (props)=> {\r\n    \r\n    const { activeLink } = props;\r\n\r\n    const navigationList = [\r\n        { title: 'Featured picture', link: '/featured_picture' },\r\n        { title: 'Gallery', link: '/gallery' }\r\n    ];\r\n\r\n    return(\r\n        <div className='navigation-layout'>\r\n            <ul className='navigation-list'>\r\n                {navigationList.map((el, index) => {\r\n                    return(<li key={index}>\r\n                        <Link className={el.title===activeLink ? 'active-link' : 'link'} to={el.link}>\r\n                            {el.title}\r\n                        </Link>\r\n                    </li>);\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport moment from 'moment';\r\n\r\nimport './single-picture-layout.css';\r\n\r\nimport { API } from '../../const';\r\n\r\nimport { NavigationLayout } from '../navigation-layout/navigation-layout';\r\n\r\nexport const SinglePictureLayout = ()=> {\r\n    const [picture, setPicture] = useState({});\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [date, setDate] = useState(moment().format('YYYY-MM-DD'));\r\n\r\n    useEffect(() => {\r\n        fetch(`${API}&date=${date}`).then( res => res.json()).then( data => setPicture(data));\r\n    }, [date]);\r\n\r\n    useEffect(() => {\r\n        const savedDate = sessionStorage.getItem('date');\r\n        if(savedDate) {\r\n            setDate(savedDate);\r\n            setStartDate(moment(savedDate).toDate());\r\n        };\r\n    }, []);\r\n\r\n    const handleChangeDate = (changedDate) => {\r\n        sessionStorage.setItem('date', changedDate);\r\n        setDate(changedDate);\r\n    }\r\n\r\n    return(\r\n        <div className='single-picture-layout'>\r\n            <NavigationLayout activeLink = 'Featured picture'/>\r\n            <h1>Picture of the day</h1>\r\n            <div className='img-container'>\r\n                <img src={picture.url}/>\r\n            </div>\r\n            <div className='date-picker-container'>\r\n                <p>Choose day: </p>\r\n                <DatePicker todayButton=\"Today\"\r\n                            selected={startDate}\r\n                            onChange={(date) => {\r\n                                setStartDate(date);\r\n                                handleChangeDate(moment(date).format('YYYY-MM-DD'));\r\n                            }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect, Fragment } from 'react';\r\n\r\nimport './gallery-layout.css';\r\n\r\nimport { API, START_DATE } from '../../const';\r\nimport { NavigationLayout } from '../navigation-layout/navigation-layout';\r\n\r\nexport const GalleryLayout = () => {\r\n\r\n    const [pictures, setPictures] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(`${API}&start_date=${START_DATE}&end_date=2020-06-21`).then( res => res.json() ).then( data => setPictures(data));\r\n    }, [pictures]);\r\n\r\n    return(\r\n        <Fragment>\r\n            <NavigationLayout activeLink='Gallery'/>\r\n            <div className='gallery-layout'>\r\n            {\r\n                pictures.reverse().map((el, index) => {\r\n                    return(\r\n                        <div className='gallery-img-container' key={index}>\r\n                            <img src={el.url} alt={el.title}/>\r\n                            <p>{el.date}</p>\r\n                            <p>{el.title}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { SinglePictureLayout } from './components/single-picture-layout/single-picture-layout';\nimport { GalleryLayout } from './components/gallery-layout/gallery-layout';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/featured_picture' component={SinglePictureLayout} />\n        <Route exact path='/gallery' component={GalleryLayout}/>\n        <Redirect to='/featured_picture'/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}